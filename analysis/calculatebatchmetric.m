%function [ result ] = calculatebatchmetric(filepath, metric)
%% CALCULATEBATCHMETRIC - Calculate a given metric over some results
%   Given a filepath and a metric iterate through the directory and all
%   files calculating the metric. Returns a NxM matrix of the metric for
%   each experiment results.
%
%   Parameters:
%       FILEPATH - (str) the directory with the results
%       METRIC - (func) A function for calculating a metric on results
%
%   Assumptions:
%       - Filenames are in the form 'filepath(1:end-2)_row_col.mat', where
%       row is the row the metric will be in and col is the column.
%       - Metric takes in a net, out object generated by a spiking net
%       file.
%       - Assumes filepath contains two trailing digits 
%

addpath(genpath('../'));
parpool(3); 

%   Par pool, filepath
%   result_filename,
%   rows and cols!!!

filepaths= {'mfgi00'};
%result_filename = 'sSDVLdrp_tpxtn';

for f = filepaths
    filepath = f{1};

    rows = 11;
    cols = 100;
    if strcmp(filepath, 'mfrq01') == 1
        rows = 10;
    end
    if strcmp(filepath, 'mfgi00') == 1
        rows = 9;
        cols = 24;
    end

    total_num = rows * cols;

    fprintf('Reading %s... %d, %d\n', filepath, rows, cols);
    result_filename = sprintf('%s_tpxtn', filepath(1:end-2));

    values = zeros(rows, cols);
    parfor i = 1 : total_num

        [row, col] = ind2sub([rows, cols], i);
        fname = sprintf('%s/%s_%d_%d.mat', filepath, filepath(1:end-2), row, col);
        fprintf('load file: %s\n', fname);
        
        info = load(fname);
      
        %values(i) = percentoffsetscorrect(info.net, info.out);
        values(i) = trueposxtrueneg(info.net, info.out);
    end    
    save(result_filename, 'values', '-v7.3');
end



%end
